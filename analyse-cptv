#!/usr/bin/python3

usage = """\
usage {argv0} <file.cptv> <output_dir>

This takes a CPTV file and generates a PNG and HTML file for each
frame. Each HTML file contains JavaScript which faciliates interactive
exploration of the raw thermal readings in each frame.
"""

import sys
import textwrap
from os import path
from cptv import CPTVReader
from cptv.image import save_frame

IMG_SCALE = 4


def main():
    if len(sys.argv) != 3:
        sys.exit(usage.format(argv0=sys.argv[0]))
    filename = sys.argv[1]
    out_dir = sys.argv[2]

    reader = CPTVReader(open(filename, "rb"))
    for n, frame in enumerate(reader):
        save_frame(frame, path.join(out_dir, make_out_name(n, 'png')))
        gen_html(frame, out_dir, n)
        print('.', end='', flush=True)


def gen_html(frame, out_dir, n):
    x_res = len(frame[0, :])
    y_res = len(frame)

    html = textwrap.dedent("""
    <html>
    <script language="javascript">
        function main() {
            var temps = TEMPS;
            var frameIm = document.getElementById("frame-image");
            var rawTempDiv = document.getElementById("rawtemp");
            frameIm.addEventListener("mousemove", function(e){
                if (!e) e = window.event;
                var x = Math.min(Math.floor(e.offsetX / SCALE), MAX_X);
                var y = Math.min(Math.floor(e.offsetY / SCALE), MAX_Y);
                rawTempDiv.innerHTML = temps[y][x];
            });
            frameIm.addEventListener("click", function(e){
                window.location.href = "NEXT_FRAME";
            });
            frameIm.addEventListener('contextmenu', function(ev) {
                ev.preventDefault();
                window.location.href = "PREV_FRAME";
                return false;
            }, false);
        }
    </script>

    <body onload="main()">
        <h1>Frame CUR_FRAME</h1>
        <img style="float: left" id="frame-image" src="IMG_NAME" width="IMG_WIDTH" height="IMG_HEIGHT"/>
        <p id="rawtemp"></p>
        <div style="clear: both">Left/right click to move through frames</div>
    </body>
    </html>
    """)

    jsrows = []
    for frow in frame:
        jsrows.append('[{}]'.format(",".join(str(v) for v in frow)))
    jstemps = "[" + ",\n".join(jsrows) + "]"

    vars = {
        'SCALE': IMG_SCALE,
        'TEMPS': jstemps,
        'MAX_X': x_res - 1,
        'MAX_Y': y_res - 1,
        'IMG_NAME': make_out_name(n, "png"),
        'IMG_WIDTH': x_res * IMG_SCALE,
        'IMG_HEIGHT': y_res * IMG_SCALE,
        'CUR_FRAME': n,
        'NEXT_FRAME': make_out_name(n+1, "html"),
        'PREV_FRAME': make_out_name(n-1, "html"),
    }
    for name, value in vars.items():
        html = html.replace(name, str(value))

    with open(path.join(out_dir, make_out_name(n, 'html')), "w") as fout:
        fout.write(html)


def make_out_name(n, ext):
    return '{:05}.{}'.format(n, ext)

if __name__ == '__main__':
    main()
